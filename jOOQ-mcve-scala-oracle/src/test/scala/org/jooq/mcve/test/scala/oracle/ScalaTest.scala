package org.jooq.mcve.test.scala.oracle

import org.jooq.impl.DSL
import org.jooq.mcve.scala.oracle.Tables.TEST
import org.jooq.tools.JooqLogger
import org.jooq.{DSLContext, SQLDialect}
import org.junit.Assert.{assertEquals, assertNotNull}
import org.junit._
import org.testcontainers.containers.wait.strategy.{HostPortWaitStrategy, LogMessageWaitStrategy, WaitAllStrategy}
import org.testcontainers.containers.OracleContainer
import org.testcontainers.utility.{DockerImageName, ResourceReaper}

import java.sql.{Connection, DriverManager}
import java.time.Duration

object ScalaTest {
  val log = JooqLogger.getLogger(classOf[ScalaTest])
  var db: OracleContainer = null
  var connection: Connection = null
  var ctx: DSLContext = null

  @BeforeClass
  def init(): Unit = {
    if (System.getProperty("jooq.codegen.jdbc.url") == null) {
      db = new OracleContainer(DockerImageName.parse("gvenzl/oracle-free").asCompatibleSubstituteFor("gvenzl/oracle-xe")) {
        override def getSid = "FREEPDB1"
        override def getDatabaseName = "FREEPDB1"
      }
        .withUsername("MCVE")
        .withPassword("MCVE")
        .withEnv("ORACLE_PASSWORD", "MCVE")
        .withEnv("APP_USER", "MCVE")
        .withEnv("APP_USER_PASSWORD", "MCVE")
        .waitingFor(new WaitAllStrategy()
          .withStrategy(new LogMessageWaitStrategy()
            .withRegEx(".*DATABASE IS READY TO USE!.*"))
          .withStrategy(new HostPortWaitStrategy)
          .withStartupTimeout(Duration.ofMinutes(5)))
        .withInitScript("db/migration/init.sql")
      db.start()
      System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl)
      System.setProperty("jooq.codegen.jdbc.username", db.getUsername)
      System.setProperty("jooq.codegen.jdbc.password", db.getPassword)
    }
    log.info("Connecting")
    connection = DriverManager.getConnection(
      System.getProperty("jooq.codegen.jdbc.url"),
      System.getProperty("jooq.codegen.jdbc.username"),
      System.getProperty("jooq.codegen.jdbc.password")
    )
    ctx = DSL.using(connection, SQLDialect.ORACLE)
    log.info("Finished setup")
  }

  @AfterClass
  def end(): Unit = {
    if (db != null) ResourceReaper.instance.stopAndRemoveContainer(db.getContainerId, db.getDockerImageName)
  }

}

class ScalaTest {

  def ctx(): DSLContext = ScalaTest.ctx

  @Before
  def setup(): Unit = {
    ctx().delete(TEST).execute
  }

  @After
  def after(): Unit = {}

  @Test
  def mcveTest(): Unit = {
    assertEquals(1, ctx()
      .insertInto(TEST)
      .columns(TEST.CD)
      .values(42)
      .execute()
    )

    val record = ctx().fetchOne(TEST, TEST.CD.eq(42))
    assertNotNull(record.getId)
  }
}
