package org.jooq.mcve.test.kotlin.postgres

import org.assertj.core.api.Assertions
import org.jooq.DSLContext
import org.jooq.SQLDialect
import org.jooq.impl.DSL
import org.jooq.impl.DSL.multiset
import org.jooq.impl.DSL.row
import org.jooq.mcve.kotlin.postgres.tables.references.JOINS
import org.jooq.mcve.kotlin.postgres.tables.references.TEST
import org.jooq.tools.JooqLogger
import org.junit.*
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotNull
import org.testcontainers.containers.PostgreSQLContainer
import org.testcontainers.utility.ResourceReaper
import java.math.BigDecimal
import java.sql.Connection
import java.sql.DriverManager
import java.util.*
import kotlin.random.Random

class KotlinTest {
    companion object {
        var log: JooqLogger = JooqLogger.getLogger(KotlinTest::class.java)
        var db: PostgreSQLContainer<*>? = null
        var connection: Connection? = null
        var ctx: DSLContext? = null

        @BeforeClass
        @JvmStatic
        fun init() {
            if (System.getProperty("jooq.codegen.jdbc.url") == null) {
                db = PostgreSQLContainer("postgres:latest")
                    .withUsername("postgres")
                    .withDatabaseName("postgres")
                    .withPassword("postgres")
                    .withInitScript("db/migration/init.sql")
                db!!.start()
                System.setProperty("jooq.codegen.jdbc.url", db!!.jdbcUrl)
                System.setProperty("jooq.codegen.jdbc.username", db!!.username)
                System.setProperty("jooq.codegen.jdbc.password", db!!.password)
            }

            val properties = Properties()
            properties.setProperty("username", "postgres")
            properties.setProperty("password", "postgres")
            log.info("Connecting")
            connection = DriverManager.getConnection(
                System.getProperty("jooq.codegen.jdbc.url"),
                System.getProperty("jooq.codegen.jdbc.username"),
                System.getProperty("jooq.codegen.jdbc.password")
            )
            ctx = DSL.using(connection, SQLDialect.POSTGRES)
            connection!!.createStatement().use { s -> log.info("Finished setup") }
        }

        @AfterClass
        @JvmStatic
        fun end() {
            if (db != null) {
                ResourceReaper.instance().stopAndRemoveContainer(db!!.containerId, db!!.dockerImageName)
            }
        }
    }

    @Before
    fun setup() {
        ctx().delete(JOINS).execute()
        ctx().delete(TEST).execute()
    }

    @After
    fun after() {}

    fun ctx(): DSLContext = ctx!!

    @Test
    fun mcveTest() {
        assertEquals(1, ctx()
            .insertInto(TEST)
            .columns(TEST.CD)
            .values(42)
            .execute()
        )

        val record = ctx().fetchOne(TEST, TEST.CD.eq(42))
        assertNotNull(record?.id)
    }

    @Test
    fun `test should fail rounding`() {
        ctx()
            .insertInto(TEST)
            .columns(TEST.CD)
            .values(42)
            .execute()

        val record = ctx().fetchOne(TEST, TEST.CD.eq(42))

        var expectedAcc = mutableListOf<BigDecimal>()
        (0..10).forEach {
            val veryBD = veryBigDecimal()
            expectedAcc.add(veryBD)
            ctx()
                .insertInto(JOINS)
                .columns(JOINS.FK, JOINS.BD)
                .values(record!!.id!!, veryBD)
                .execute()
        }

        val result = ctx().select(
            row(TEST),
            multiset(
                ctx().selectFrom(JOINS)
                    .where(JOINS.FK.eq(record!!.id!!))
            )
        )
            .from(TEST)
            .fetch()

        val values = result.map {it.value2()}
            .flatMap { it.getValues(JOINS.BD) }

        Assertions.assertThat(values)
            .containsExactlyInAnyOrderElementsOf(expectedAcc)

        Assertions.assertThat(values.reduce { a, b -> a?.plus(b!!) })
            .isEqualTo(expectedAcc.reduce { a, b -> a + b })
    }

    fun veryBigDecimal(): BigDecimal = BigDecimal("${Random.nextLong(1_000_000_000_000_000, 999_999_999_999_999_999)}.${Random.nextLong(1_000_000_000_000, 999_999_999_999_999_999)}")
}