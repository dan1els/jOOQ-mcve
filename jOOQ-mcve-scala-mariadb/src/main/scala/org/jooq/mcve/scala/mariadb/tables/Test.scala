/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.mariadb.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.scala.mariadb.Keys
import org.jooq.mcve.scala.mariadb.Mcve
import org.jooq.mcve.scala.mariadb.tables.records.TestRecord

import scala.Array


object Test {

  /**
   * The reference instance of <code>mcve.test</code>
   */
  val TEST = new Test
}

/**
 * This class is generated by jOOQ.
 */
class Test(
  alias: Name,
  path: Table[? <: Record],
  childPath: ForeignKey[? <: Record, TestRecord],
  parentPath: InverseForeignKey[? <: Record, TestRecord],
  aliased: Table[TestRecord],
  parameters: Array[ Field[?] ],
  where: Condition
)
extends TableImpl[TestRecord](
  alias,
  Mcve.MCVE,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table,
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[TestRecord] = classOf[TestRecord]

  /**
   * The column <code>mcve.test.id</code>.
   */
  val ID: TableField[TestRecord, Integer] = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>mcve.test.cd</code>.
   */
  val CD: TableField[TestRecord, Integer] = createField(DSL.name("cd"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), "")

  private def this(alias: Name, aliased: Table[TestRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[TestRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>mcve.test</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.mcve.scala.mariadb.tables.Test.TEST)

  /**
   * Create an aliased <code>mcve.test</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.mcve.scala.mariadb.tables.Test.TEST)

  /**
   * Create a <code>mcve.test</code> table reference
   */
  def this() = this(DSL.name("test"), null)

  override def getSchema: Schema = if (super.aliased()) null else Mcve.MCVE

  override def getIdentity: Identity[TestRecord, Integer] = super.getIdentity.asInstanceOf[ Identity[TestRecord, Integer] ]

  override def getPrimaryKey: UniqueKey[TestRecord] = Keys.KEY_TEST_PRIMARY
  override def as(alias: String): Test = new Test(DSL.name(alias), this)
  override def as(alias: Name): Test = new Test(alias, this)
  override def as(alias: Table[?]): Test = new Test(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Test = new Test(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Test = new Test(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[?]): Test = new Test(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): Test = new Test(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[? <: Condition]): Test = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): Test = where(DSL.and(conditions*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): Test = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): Test = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): Test = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): Test = where(DSL.condition(condition, binds*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[?]): Test = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[?]): Test = where(DSL.notExists(select))
}
