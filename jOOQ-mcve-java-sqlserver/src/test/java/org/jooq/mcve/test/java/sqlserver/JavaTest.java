package org.jooq.mcve.test.java.sqlserver;

import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.sqlserver.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.testcontainers.containers.MSSQLServerContainer;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import static org.jooq.mcve.java.sqlserver.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    static JooqLogger              log = JooqLogger.getLogger(JavaTest.class);
    static MSSQLServerContainer<?> db;
    static Connection              connection;
    static DSLContext              ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new MSSQLServerContainer<>("mcr.microsoft.com/mssql/server:2022-CU15-ubuntu-22.04")
                    .acceptLicense()
                    .withPassword("Test1234")
                    .withEnv("MSSQL_PID", "Express")
                    .withUrlParam("encrypt", "true")
                    .withUrlParam("trustServerCertificate", "true")
                    .withInitScript("db/migration/init.sql");
            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("jooq.codegen.jdbc.url"),
            System.getProperty("jooq.codegen.jdbc.username"),
            System.getProperty("jooq.codegen.jdbc.password")
        );

        ctx = DSL.using(connection, SQLDialect.SQLSERVER);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        assertEquals(1,
            ctx.insertInto(TEST)
               .columns(TEST.CD)
               .values(42)
               .execute()
        );

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record.getId());
    }
}
